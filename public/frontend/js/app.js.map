{"version":3,"sources":["ask.js","question.js","answer.js","feature.js","modal.js","login_modal.js","edit_user_modal.js","fbshare.js","sorting.js","tweet.js","youtube.js","app.js"],"names":[],"mappingsnrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACffile":"app.js","sourcesContent":["(function(){\n    'use strict';\n\n    Vue.component('ask', {\n        template: '#ask-template',\n        data: function() {\n            return {\n                question_text: '',\n                open: false,\n                asked: false,\n                errorText: ''\n            };\n        },\n        props: [ 'user', 'recipient', 'loggedIn', 'topic' ],\n        methods: {\n            toggle: function() {\n                if (this.loggedIn) {\n                    this.open = !this.open;\n                    this.$nextTick( function() {\n                        this.$els.questionText.focus();\n                    });\n                } else {\n                    this.showSignupModal();\n                }\n            },\n            close: function() {\n                this.open = false;  \n            },\n            sendQuestion: function() {\n                this.errorText = '';\n                this.$http.post('/api/question/store',\n                {\n                    recipient_id: this.recipient.id,\n                    topic_id: this.topic.id,\n                    asker_id: this.user.id,\n                    question: this.question_text\n                })\n                .then(function (response) {\n                    if (response.data.success) {\n                        this.$dispatch('questions-updated', response.data.data);\n                        this.open = false;\n                        this.question_text = '';\n                        this.asked = true;\n                    } else {\n                        this.errorText = response.data.error;\n                    }\n                }, function (response) {\n                    console.log('failed');\n                });\n            },\n            showSignupModal: function() {\n                this.$dispatch('show-signup-modal');\n            }\n        },\n        events: {\n            'question-asked': function() {\n                this.open = false;\n                this.question_text = '';\n            }\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('question', {\n        template: '#question-template',\n        props: ['question', 'recipient', 'loggedIn', 'isAdmin', 'baseUrl', 'topic'],\n        data: function() {\n            return {\n                replyOpen: false,\n                answerText: ''\n            }\n        },\n        methods: {\n            upvote: function(questionId) {\n                if (this.loggedIn) {\n                    this.question.upvoted = !this.question.upvoted;\n                    this.question.downvoted = false;\n                    this.$http.post('/api/question/upvote', { question_id: questionId }).then(function (response) {\n                        if (!response.data.success) {\n                            this.question.upvoted = !this.question.upvoted;\n                        } else {\n                            this.question.net_votes = response.data.data.net_votes;\n                        }\n                    }, function (response) {\n                        this.question.upvoted = !this.question.upvoted;\n                    });\n                } else {\n                    this.showSignupModal();\n                }\n            },\n            downvote: function(questionId) {\n                if (this.loggedIn) {\n                    this.question.downvoted = !this.question.downvoted;\n                    this.question.upvoted = false;\n\n                    this.$http.post('/api/question/downvote', { question_id: questionId }).then(function (response) {\n                        if (!response.data.success) {\n                            this.question.downvoted = !this.question.downvoted;\n                        } else {\n                            this.question.net_votes = response.data.data.net_votes;\n                        }\n                    }, function (response) {\n                        this.question.downvoted = !this.question.downvoted;\n                    });\n                } else {\n                    this.showSignupModal();\n                }\n            },\n            hide: function() {\n                if (this.loggedIn && this.isAdmin) {\n                    this.$http.post('/api/question/hide', { question_id: this.question.id })\n                        .then(function (response) {\n                            if (response.data.success) {\n                                this.$dispatch('questions-updated', response.data.data);\n                            }\n                        });\n                }\n            },\n            reply: function(e) {\n                e.preventDefault();\n                this.replyOpen = true;\n            },\n            submitAnswer: function(e) {\n                e.preventDefault();\n                if (this.loggedIn && this.isAdmin) {\n                    this.$http.post('/api/answer/store',\n                    {\n                        question_id: this.question.id,\n                        topic_id: this.topic.id,\n                        text_response: this.answerText,\n                        video_url: this.answerVideo\n                    }).then(function (response) {\n                        if (response.data.success) {\n                            this.replyOpen = false;\n                            this.answerText = '';\n                            this.question.answer = response.data.data.answer;\n                        }\n                    });\n                }\n            },\n            cancelAnswer: function(e) {\n                e.preventDefault();\n                this.replyOpen = false;\n            },\n            showSignupModal: function() {\n                this.$dispatch('show-signup-modal');\n            }\n        },\n        computed: {\n            shareUrl: function() {\n                return this.baseUrl + '/' + topic.slug + '/' + this.question.id;\n            },\n            shareText: function() {\n                return 'Ask ' + this.recipient.first_name;\n            }\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('answer', {\n        template: '#answer-template',\n        props: ['answer', 'recipient', 'loggedIn', 'isAdmin'],\n        methods: {\n            like: function(answerId) {\n                if (this.loggedIn) {\n                    this.answer.liked = !this.answer.liked;\n\n                    this.$http.post('/api/answer/like', { answer_id: answerId }).then(function (response) {\n                        if (!response.data.success) {\n                            this.answer.liked = !this.answer.liked;\n                        } else {\n                            this.answer.net_votes = response.data.data.count;\n                        }\n                    }, function (response) {\n                        this.answer.liked = !this.answer.liked;\n                    });\n                } else {\n                    this.showSignupModal();\n                }\n            },\n            showSignupModal: function() {\n                this.$dispatch('show-signup-modal');\n            }\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('feature', {\n        template: '#feature-template',\n        props: ['user', 'isAdmin', 'topic'],\n        data: function() {\n            return {\n                editing: false\n            }\n        },\n        methods: {\n            editProfile: function() {\n                this.editing = true;\n            },\n            saveProfile: function() {\n                this.$http.post('/api/user/profile/update',\n                {\n                    first_name: this.user.first_name,\n                    last_name: this.user.last_name,\n                    i_am_a: this.user.profile.i_am_a,\n                    from: this.user.from,\n                    description: this.user.profile.description\n                }).then(function (response) {\n                    if (!response.data.success) {\n                    } else {\n                        this.$dispatch('user-updated', response.data.data.user);\n                    }\n                }, function (response) {\n                    console.log('failed');\n                });\n                this.editing = false;\n            },\n            cancel: function() {\n                this.editing = false;\n            }\n        },\n        computed: {\n            name: function() {\n                return this.user.first_name + ' ' + this.user.last_name;\n            }\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('modal', {\n        template: '#modal-template',\n        props: ['show', 'onClose'],\n        methods: {\n            close: function () {\n                this.onClose();\n            }\n        },\n        ready: function () {\n            document.addEventListener(\"keydown\", function (e) {\n                if (this.show && e.keyCode == 27) {\n                    this.onClose();\n                }\n            });\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('loginModal', {\n        template: '#login-modal-template',\n        props: ['show', 'userLocation'],\n        data: function () {\n            return {\n    \t        title: '',\n                body: '',\n                login: false,\n                firstName: '',\n                lastName: '',\n                from: '',\n                email: '',\n                password: '',\n                errorText: ''\n            };\n        },\n        ready: function() {\n            this.from = this.userLocation;\n        },\n        methods: {\n            close: function () {\n                this.show = false;\n                this.login = false;\n                this.clearFields();\n            },\n            toggle: function() {\n                this.login = !this.login;\n                this.clearFields();\n            },\n            emailLogin: function () {\n                var self = this;\n                this.$http.post('/api/login', { email: this.email, password: this.password }).then(function (response) {\n                    if (!response.data.success) {\n                        self.errorText = 'Email or password is incorrect.';\n                    } else {\n                        self.errorText = '';\n                        this.$dispatch('user-updated', response.data.data.user);\n                        this.close();\n                    }\n                }, function (response) {\n                });\n            },\n            emailSignup: function () {\n                var self = this;\n                this.$http.post('/api/user/store',\n                { first_name: this.firstName, last_name: this.lastName, from: this.from, email: this.email, password: this.password })\n                .then(function (response) {\n                    if (!response.data.success) {\n                    } else {\n                        this.errorText = '';\n                        this.$dispatch('user-updated', response.data.data.user);\n                        this.close();\n                    }\n                }, function (response) {\n                    if (response.status == '422') {\n                        self.errorText = '';\n                        Object.keys(response.data).forEach(function (key) {\n                           self.errorText += response.data[key][0] + '<br/>';\n                        });\n                    }\n                });\n            },\n            clearFields: function() {\n                this.firstName = '';\n                this.lastName = '';\n                this.email = '';\n                this.password = '';\n                this.errorText = '';\n                this.title = '';\n                this.body = '';\n            }\n        },\n        computed: {\n            loginValidated: function () {\n                return (this.email != '' && this.password != '');\n            },\n            signupValidated: function() {\n                return (this.firstName != '' && this.lastName != '' && this.from != '' && this.email != '' && this.password != '');\n            }\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('editUserModal', {\n        template: '#edit-user-modal-template',\n        props: ['show', 'user'],\n        data: function () {\n            return {\n    \t        title: '',\n                body: '',\n                password: '',\n                validationError: ''\n            };\n        },\n        methods: {\n            close: function () {\n                this.show = false;\n                this.title = '';\n                this.body = '';\n            },\n            updateUser: function() {\n                this.$http.post('/api/user/update',\n                { first_name: this.user.first_name, last_name: this.user.last_name, from: this.user.from, email: this.user.email, password: this.password })\n                .then(function (response) {\n                    if (response.data.success) {\n                        this.$dispatch('user-updated', response.data.data.user);\n                        this.close();\n                    }\n                }, function (response) {\n                    console.log('failed');\n                });\n            }\n        },\n        computed: {\n            validated: function() {\n                return (this.user.first_name != '' && this.user.last_name != ''\n                    && this.user.from != '' && this.user.email != '');\n            }\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('fbshare', {\n        template: '#fbshare-template',\n        props: [ 'link', 'text' ]\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('sorting', {\n        template: '#sorting-template',\n        props: [ 'sortType' ],\n        methods: {\n            sort: function(type) {\n                this.sortType = type;\n                this.$dispatch('update-question-sort', this.sortType);\n            }\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('tweet', {\n        template: '#tweet-template',\n        props: [ 'link', 'text' ]\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('youtube', {\n        template: '#youtube-template',\n        props: [ 'videoId' ]\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            showLoginModal: false,\n            showEditModal: false,\n            recipient: recipient,\n            questions: [],\n            loggedIn: loggedIn,\n            featuredQuestion: featuredQuestion,\n            featuredShowing: true,\n            sortType: 'trending',\n            user: user,\n            isAdmin: isAdmin,\n            baseUrl: baseUrl,\n            topic: topic,\n            userLocation: userLocation,\n            profileFormUpload:new FormData(),\n        },\n        methods: {\n            logout: function () {\n                this.$http.get('/logout').then(function(response) {\n                    this.loggedIn = false;\n                    this.user = null;\n                    this.isAdmin = false;\n                });\n            },\n            bindFile: function() {\n                this.profileFormUpload.append('file', this.$els.fileInput.files[0]);\n                this.$http.post('/api/user/picture', this.profileFormUpload, function(data){\n                    this.user = data.data;\n                    if (this.user.id == this.recipient.id) {\n                        this.recipient.picture = this.user.picture;\n                    }\n                }).error(function (data, status, request) {\n                    //error handling here\n                });\n            },\n            openFile: function() {\n                this.$els.fileInput.click();\n            },\n            toggleFeatured: function() {\n                this.featuredShowing = false;\n            },\n            loadQuestions: function() {\n                this.$http.post('/api/question/get',\n                {\n                    recipient_id: recipient.id,\n                    topic_id: this.topic.id,\n                    sort: this.sortType,\n                    offset: this.questions.length\n                }, function(data){\n                    for (var c = 0; c < data.length; c++) {\n                        data[c].created_at = moment.utc(data[c].created_at).toDate();\n                        if (data[c].answer != null) {\n                            data[c].answer.created_at = moment.utc(data[c].answer.created_at).toDate();\n                        }\n                        this.questions.push(data[c]);\n                    }\n                }).error(function (data, status, request) {\n                    //error handling here\n                });\n            }\n        },\n        events: {\n            'user-updated': function (user) {\n                this.user = user;\n                this.loggedIn = true;\n            },\n            'questions-updated': function(questions) {\n                for (var c = 0; c < questions.length; c++) {\n                    questions[c].created_at = moment.utc(questions[c].created_at).toDate();\n                    if (questions[c].answer != null) {\n                        questions[c].answer.created_at = moment.utc(questions[c].answer.created_at).toDate();\n                    }\n                }\n                this.questions = questions;\n            },\n            'show-signup-modal': function() {\n                this.showLoginModal = true;\n            },\n            'update-question-sort': function(sortType) {\n                this.$http.post('/api/question/get',\n                {\n                    recipient_id: recipient.id,\n                    topic_id: this.topic.id,\n                    sort: sortType,\n                    offset: 0\n                }, function(data){\n                    this.questions = data;\n                    this.questionOffset = 0;\n                    this.questionEnd = false;\n                    this.sortType = sortType;\n                }).error(function (data, status, request) {\n                    //error handling here\n                });\n            }\n        }\n    });\n\n})();\n"],"sourceRoot":"/source/"}