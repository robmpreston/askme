{"version":3,"sources":["ask.js","question.js","answer.js","feature.js","modal.js","login_modal.js","fbshare.js","tweet.js","app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["(function(){\n    'use strict';\n\n    Vue.component('ask', {\n        template: '#ask-template',\n        data: function() {\n            return {\n                question_text: '',\n                open: false,\n                asked: false\n            };\n        },\n        props: [ 'user', 'recipient' ],\n        methods: {\n            toggle: function() {\n                this.open = !this.open;\n                this.$nextTick( function() {\n                    this.$els.questionText.focus();\n                });\n            },\n            sendQuestion: function() {\n                this.$http.post('/api/question/store',\n                {\n                    recipient_id: this.recipient.id,\n                    asker_id: this.user.id,\n                    question: this.question_text\n                })\n                .then(function (response) {\n                    if (response.data.success) {\n                        this.$dispatch('questions-updated', response.data.data);\n                        this.open = false;\n                        this.question_text = '';\n                        this.asked = true;\n                    }\n                }, function (response) {\n                    console.log('failed');\n                });\n            }\n        },\n        events: {\n            'question-asked': function() {\n                this.open = false;\n                this.question_text = '';\n            }\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('question', {\n        template: '#question-template',\n        props: ['question', 'recipient', 'loggedIn', 'isAdmin', 'baseUrl'],\n        data: function() {\n            return {\n                replyOpen: false,\n                answerText: ''\n            }\n        },\n        methods: {\n            upvote: function(questionId) {\n                if (this.loggedIn) {\n                    this.question.upvoted = !this.question.upvoted;\n                    this.question.downvoted = false;\n                    this.$http.post('/api/question/upvote', { question_id: questionId }).then(function (response) {\n                        if (!response.data.success) {\n                            this.question.upvoted = !this.question.upvoted;\n                        } else {\n                            this.question.net_votes = response.data.data.net_votes;\n                        }\n                    }, function (response) {\n                        this.question.upvoted = !this.question.upvoted;\n                    });\n                }\n            },\n            downvote: function(questionId) {\n                if (this.loggedIn) {\n                    this.question.downvoted = !this.question.downvoted;\n                    this.question.upvoted = false;\n\n                    this.$http.post('/api/question/downvote', { question_id: questionId }).then(function (response) {\n                        if (!response.data.success) {\n                            this.question.downvoted = !this.question.downvoted;\n                        } else {\n                            this.question.net_votes = response.data.data.net_votes;\n                        }\n                    }, function (response) {\n                        this.question.downvoted = !this.question.downvoted;\n                    });\n                }\n            },\n            hide: function() {\n                if (this.loggedIn && this.isAdmin) {\n                    this.$http.post('/api/question/hide', { question_id: this.question.id })\n                        .then(function (response) {\n\n                        });\n                }\n            },\n            reply: function() {\n                this.replyOpen = true;\n            },\n            submitAnswer: function() {\n                if (this.loggedIn && this.isAdmin) {\n                    this.$http.post('/api/answer/store', { question_id: this.question.id, text_response: this.answerText })\n                        .then(function (response) {\n                            if (response.data.success) {\n                                this.replyOpen = false;\n                                this.answerText = '';\n                                this.question.answer = response.data.data.answer;\n                            }\n                        });\n                }\n            }\n        },\n        computed: {\n            shareUrl: function() {\n                return this.baseUrl + '/' + this.question.id;\n            }\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('answer', {\n        template: '#answer-template',\n        props: ['answer', 'recipient', 'loggedIn', 'isAdmin'],\n        methods: {\n            like: function(answerId) {\n                if (this.loggedIn) {\n                    this.answer.liked = !this.answer.liked;\n\n                    this.$http.post('/api/answer/like', { answer_id: answerId }).then(function (response) {\n                        if (!response.data.success) {\n                            this.answer.liked = !this.answer.liked;\n                        } else {\n                            this.answer.net_votes = response.data.data.count;\n                        }\n                    }, function (response) {\n                        this.answer.liked = !this.answer.liked;\n                    });\n                }\n            }\n        },\n        computed: {\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('feature', {\n        template: '#feature-template',\n        props: ['user', 'isAdmin'],\n        data: function() {\n            return {\n                editing: false\n            }\n        },\n        methods: {\n            editProfile: function() {\n                this.editing = true;\n            },\n            saveProfile: function() {\n\n            },\n            cancel: function() {\n                this.editing = false;\n            }\n        },\n        computed: {\n            name: function() {\n                return this.user.first_name + ' ' + this.user.last_name;\n            }\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('modal', {\n        template: '#modal-template',\n        props: ['show', 'onClose'],\n        methods: {\n            close: function () {\n                this.onClose();\n            }\n        },\n        ready: function () {\n            document.addEventListener(\"keydown\", (e) => {\n                if (this.show && e.keyCode == 27) {\n                    this.onClose();\n                }\n            });\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('loginModal', {\n        template: '#login-modal-template',\n        props: ['show'],\n        data: function () {\n            return {\n    \t        title: '',\n                body: '',\n                login: true,\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: ''\n            };\n        },\n        methods: {\n            close: function () {\n                this.show = false;\n                this.title = '';\n                this.body = '';\n            },\n            toggle: function() {\n                this.login = !this.login;\n            },\n            emailLogin: function () {\n                this.$http.post('/api/login', { email: this.email, password: this.password }).then(function (response) {\n                    if (!response.data.success) {\n                    } else {\n                        this.$dispatch('user-updated', response.data.data);\n                    }\n                }, function (response) {\n                    console.log('failed');\n                });\n                this.close();\n            }\n        }\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('fbshare', {\n        template: '#fbshare-template',\n        props: [ 'link', 'text' ]\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    Vue.component('tweet', {\n        template: '#tweet-template',\n        props: [ 'link', 'text' ]\n    });\n\n})();\n","(function(){\n    'use strict';\n\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            showLoginModal: false,\n            recipient: recipient,\n            questions: questions,\n            loggedIn: loggedIn,\n            user: user,\n            isAdmin: isAdmin,\n            baseUrl: baseUrl,\n            profileFormUpload:new FormData(),\n        },\n        methods: {\n            logout: function () {\n                this.$http.get('/logout').then(function(response) {\n                    this.loggedIn = false;\n                    this.user = null;\n                });\n            },\n            bindFile: function() {\n                this.profileFormUpload.append('file', this.$els.fileinput.files[0]);\n                this.$http.post('/api/user/picture', this.profileFormUpload, function(data){\n                    this.user = data.data;\n                    if (this.user.id == this.recipient.id) {\n                        this.recipient.picture = this.user.picture;\n                    }\n                }).error(function (data, status, request) {\n                    //error handling here\n                });\n            }\n        },\n        events: {\n            'user-updated': function (user) {\n                this.user = user;\n                this.loggedIn = true;\n            },\n            'questions-updated': function(questions) {\n                this.questions = questions;\n            }\n        }\n    });\n\n})();\n"],"sourceRoot":"/source/"}